<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: security.proto

namespace Io\Token\Proto\Common\Security\SealedMessage;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * The message is encrypted using the public key of the recipient.
 * The message can be decrypted only with the corresponding private key.
 *
 * Generated from protobuf message <code>io.token.proto.common.security.SealedMessage.RsaMethod</code>
 */
class RsaMethod extends \Google\Protobuf\Internal\Message
{
    /**
     * The id of the key used for encryption
     *
     * Generated from protobuf field <code>string key_id = 1;</code>
     */
    private $key_id = '';
    /**
     * RSA/ECB/OAEPWithSHA-256AndMGF1Padding
     *
     * Generated from protobuf field <code>string algorithm = 2;</code>
     */
    private $algorithm = '';
    /**
     * Base64url encoded ciphertext signature.
     *
     * Generated from protobuf field <code>string signature = 3;</code>
     */
    private $signature = '';
    /**
     * the key-id of the signature
     *
     * Generated from protobuf field <code>string signature_key_id = 4;</code>
     */
    private $signature_key_id = '';

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $key_id
     *           The id of the key used for encryption
     *     @type string $algorithm
     *           RSA/ECB/OAEPWithSHA-256AndMGF1Padding
     *     @type string $signature
     *           Base64url encoded ciphertext signature.
     *     @type string $signature_key_id
     *           the key-id of the signature
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Security::initOnce();
        parent::__construct($data);
    }

    /**
     * The id of the key used for encryption
     *
     * Generated from protobuf field <code>string key_id = 1;</code>
     * @return string
     */
    public function getKeyId()
    {
        return $this->key_id;
    }

    /**
     * The id of the key used for encryption
     *
     * Generated from protobuf field <code>string key_id = 1;</code>
     * @param string $var
     * @return $this
     */
    public function setKeyId($var)
    {
        GPBUtil::checkString($var, True);
        $this->key_id = $var;

        return $this;
    }

    /**
     * RSA/ECB/OAEPWithSHA-256AndMGF1Padding
     *
     * Generated from protobuf field <code>string algorithm = 2;</code>
     * @return string
     */
    public function getAlgorithm()
    {
        return $this->algorithm;
    }

    /**
     * RSA/ECB/OAEPWithSHA-256AndMGF1Padding
     *
     * Generated from protobuf field <code>string algorithm = 2;</code>
     * @param string $var
     * @return $this
     */
    public function setAlgorithm($var)
    {
        GPBUtil::checkString($var, True);
        $this->algorithm = $var;

        return $this;
    }

    /**
     * Base64url encoded ciphertext signature.
     *
     * Generated from protobuf field <code>string signature = 3;</code>
     * @return string
     */
    public function getSignature()
    {
        return $this->signature;
    }

    /**
     * Base64url encoded ciphertext signature.
     *
     * Generated from protobuf field <code>string signature = 3;</code>
     * @param string $var
     * @return $this
     */
    public function setSignature($var)
    {
        GPBUtil::checkString($var, True);
        $this->signature = $var;

        return $this;
    }

    /**
     * the key-id of the signature
     *
     * Generated from protobuf field <code>string signature_key_id = 4;</code>
     * @return string
     */
    public function getSignatureKeyId()
    {
        return $this->signature_key_id;
    }

    /**
     * the key-id of the signature
     *
     * Generated from protobuf field <code>string signature_key_id = 4;</code>
     * @param string $var
     * @return $this
     */
    public function setSignatureKeyId($var)
    {
        GPBUtil::checkString($var, True);
        $this->signature_key_id = $var;

        return $this;
    }

}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(RsaMethod::class, \Io\Token\Proto\Common\Security\SealedMessage_RsaMethod::class);


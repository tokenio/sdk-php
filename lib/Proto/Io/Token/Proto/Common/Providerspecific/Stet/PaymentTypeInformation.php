<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: provider/stet.proto

namespace Io\Token\Proto\Common\Providerspecific\Stet;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Generated from protobuf message <code>io.token.proto.common.providerspecific.stet.PaymentTypeInformation</code>
 */
class PaymentTypeInformation extends \Google\Protobuf\Internal\Message
{
    /**
     * ISO20022: Indicator of the urgency or order of importance that the instructing party would like the instructed party to apply to the processing of the instruction. Enum: [HIGH, NORM].
     *
     * Generated from protobuf field <code>string instruction_priority = 1;</code>
     */
    private $instruction_priority = '';
    /**
     * ISO20022: Agreement under which or rules under which the transaction should be processed. Only SEPA is allowed
     *
     * Generated from protobuf field <code>string service_level = 2;</code>
     */
    private $service_level = '';
    /**
     * ISO20022: User community specific instrument. Usage: This element is used to specify a local instrument, local clearing option and/or further qualify the service or service level.
     *
     * Generated from protobuf field <code>string local_instrument = 3;</code>
     */
    private $local_instrument = '';
    /**
     * ISO20022: Specifies the high level purpose of the instruction based on a set of pre-defined categories. Enum: [CASH, CORT, DVPM, INTC, TREA]
     *
     * Generated from protobuf field <code>string category_purpose = 4;</code>
     */
    private $category_purpose = '';

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $instruction_priority
     *           ISO20022: Indicator of the urgency or order of importance that the instructing party would like the instructed party to apply to the processing of the instruction. Enum: [HIGH, NORM].
     *     @type string $service_level
     *           ISO20022: Agreement under which or rules under which the transaction should be processed. Only SEPA is allowed
     *     @type string $local_instrument
     *           ISO20022: User community specific instrument. Usage: This element is used to specify a local instrument, local clearing option and/or further qualify the service or service level.
     *     @type string $category_purpose
     *           ISO20022: Specifies the high level purpose of the instruction based on a set of pre-defined categories. Enum: [CASH, CORT, DVPM, INTC, TREA]
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Provider\Stet::initOnce();
        parent::__construct($data);
    }

    /**
     * ISO20022: Indicator of the urgency or order of importance that the instructing party would like the instructed party to apply to the processing of the instruction. Enum: [HIGH, NORM].
     *
     * Generated from protobuf field <code>string instruction_priority = 1;</code>
     * @return string
     */
    public function getInstructionPriority()
    {
        return $this->instruction_priority;
    }

    /**
     * ISO20022: Indicator of the urgency or order of importance that the instructing party would like the instructed party to apply to the processing of the instruction. Enum: [HIGH, NORM].
     *
     * Generated from protobuf field <code>string instruction_priority = 1;</code>
     * @param string $var
     * @return $this
     */
    public function setInstructionPriority($var)
    {
        GPBUtil::checkString($var, True);
        $this->instruction_priority = $var;

        return $this;
    }

    /**
     * ISO20022: Agreement under which or rules under which the transaction should be processed. Only SEPA is allowed
     *
     * Generated from protobuf field <code>string service_level = 2;</code>
     * @return string
     */
    public function getServiceLevel()
    {
        return $this->service_level;
    }

    /**
     * ISO20022: Agreement under which or rules under which the transaction should be processed. Only SEPA is allowed
     *
     * Generated from protobuf field <code>string service_level = 2;</code>
     * @param string $var
     * @return $this
     */
    public function setServiceLevel($var)
    {
        GPBUtil::checkString($var, True);
        $this->service_level = $var;

        return $this;
    }

    /**
     * ISO20022: User community specific instrument. Usage: This element is used to specify a local instrument, local clearing option and/or further qualify the service or service level.
     *
     * Generated from protobuf field <code>string local_instrument = 3;</code>
     * @return string
     */
    public function getLocalInstrument()
    {
        return $this->local_instrument;
    }

    /**
     * ISO20022: User community specific instrument. Usage: This element is used to specify a local instrument, local clearing option and/or further qualify the service or service level.
     *
     * Generated from protobuf field <code>string local_instrument = 3;</code>
     * @param string $var
     * @return $this
     */
    public function setLocalInstrument($var)
    {
        GPBUtil::checkString($var, True);
        $this->local_instrument = $var;

        return $this;
    }

    /**
     * ISO20022: Specifies the high level purpose of the instruction based on a set of pre-defined categories. Enum: [CASH, CORT, DVPM, INTC, TREA]
     *
     * Generated from protobuf field <code>string category_purpose = 4;</code>
     * @return string
     */
    public function getCategoryPurpose()
    {
        return $this->category_purpose;
    }

    /**
     * ISO20022: Specifies the high level purpose of the instruction based on a set of pre-defined categories. Enum: [CASH, CORT, DVPM, INTC, TREA]
     *
     * Generated from protobuf field <code>string category_purpose = 4;</code>
     * @param string $var
     * @return $this
     */
    public function setCategoryPurpose($var)
    {
        GPBUtil::checkString($var, True);
        $this->category_purpose = $var;

        return $this;
    }

}


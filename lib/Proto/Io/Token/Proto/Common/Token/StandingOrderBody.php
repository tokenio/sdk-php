<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: token.proto

namespace Io\Token\Proto\Common\Token;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Schedule a series of payments from 'start_date' to 'end_date'
 * at the given frequency. Each payment will be for 'amount'.
 *
 * Generated from protobuf message <code>io.token.proto.common.token.StandingOrderBody</code>
 */
class StandingOrderBody extends \Google\Protobuf\Internal\Message
{
    /**
     * Transfer instructions.
     *
     * Generated from protobuf field <code>.io.token.proto.common.transferinstructions.TransferInstructions instructions = 1;</code>
     */
    private $instructions = null;
    /**
     * ISO 8601: YYYY-MM-DD or	YYYYMMDD
     *
     * Generated from protobuf field <code>string start_date = 2;</code>
     */
    private $start_date = '';
    /**
     * Optional. ISO 8601: YYYY-MM-DD or	YYYYMMDD
     *
     * Generated from protobuf field <code>string end_date = 3;</code>
     */
    private $end_date = '';
    /**
     * ISO 20022: DAIL, WEEK, TOWK, MNTH, TOMN, QUTR, SEMI, YEAR
     *
     * Generated from protobuf field <code>string frequency = 4;</code>
     */
    private $frequency = '';
    /**
     * Amount of each individual payment
     *
     * Generated from protobuf field <code>string amount = 5;</code>
     */
    private $amount = '';
    /**
     * ISO 4217, 3 letter currency code such as "USD" or "EUR".
     *
     * Generated from protobuf field <code>string currency = 6;</code>
     */
    private $currency = '';

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type \Io\Token\Proto\Common\Transferinstructions\TransferInstructions $instructions
     *           Transfer instructions.
     *     @type string $start_date
     *           ISO 8601: YYYY-MM-DD or	YYYYMMDD
     *     @type string $end_date
     *           Optional. ISO 8601: YYYY-MM-DD or	YYYYMMDD
     *     @type string $frequency
     *           ISO 20022: DAIL, WEEK, TOWK, MNTH, TOMN, QUTR, SEMI, YEAR
     *     @type string $amount
     *           Amount of each individual payment
     *     @type string $currency
     *           ISO 4217, 3 letter currency code such as "USD" or "EUR".
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Token::initOnce();
        parent::__construct($data);
    }

    /**
     * Transfer instructions.
     *
     * Generated from protobuf field <code>.io.token.proto.common.transferinstructions.TransferInstructions instructions = 1;</code>
     * @return \Io\Token\Proto\Common\Transferinstructions\TransferInstructions
     */
    public function getInstructions()
    {
        return $this->instructions;
    }

    /**
     * Transfer instructions.
     *
     * Generated from protobuf field <code>.io.token.proto.common.transferinstructions.TransferInstructions instructions = 1;</code>
     * @param \Io\Token\Proto\Common\Transferinstructions\TransferInstructions $var
     * @return $this
     */
    public function setInstructions($var)
    {
        GPBUtil::checkMessage($var, \Io\Token\Proto\Common\Transferinstructions\TransferInstructions::class);
        $this->instructions = $var;

        return $this;
    }

    /**
     * ISO 8601: YYYY-MM-DD or	YYYYMMDD
     *
     * Generated from protobuf field <code>string start_date = 2;</code>
     * @return string
     */
    public function getStartDate()
    {
        return $this->start_date;
    }

    /**
     * ISO 8601: YYYY-MM-DD or	YYYYMMDD
     *
     * Generated from protobuf field <code>string start_date = 2;</code>
     * @param string $var
     * @return $this
     */
    public function setStartDate($var)
    {
        GPBUtil::checkString($var, True);
        $this->start_date = $var;

        return $this;
    }

    /**
     * Optional. ISO 8601: YYYY-MM-DD or	YYYYMMDD
     *
     * Generated from protobuf field <code>string end_date = 3;</code>
     * @return string
     */
    public function getEndDate()
    {
        return $this->end_date;
    }

    /**
     * Optional. ISO 8601: YYYY-MM-DD or	YYYYMMDD
     *
     * Generated from protobuf field <code>string end_date = 3;</code>
     * @param string $var
     * @return $this
     */
    public function setEndDate($var)
    {
        GPBUtil::checkString($var, True);
        $this->end_date = $var;

        return $this;
    }

    /**
     * ISO 20022: DAIL, WEEK, TOWK, MNTH, TOMN, QUTR, SEMI, YEAR
     *
     * Generated from protobuf field <code>string frequency = 4;</code>
     * @return string
     */
    public function getFrequency()
    {
        return $this->frequency;
    }

    /**
     * ISO 20022: DAIL, WEEK, TOWK, MNTH, TOMN, QUTR, SEMI, YEAR
     *
     * Generated from protobuf field <code>string frequency = 4;</code>
     * @param string $var
     * @return $this
     */
    public function setFrequency($var)
    {
        GPBUtil::checkString($var, True);
        $this->frequency = $var;

        return $this;
    }

    /**
     * Amount of each individual payment
     *
     * Generated from protobuf field <code>string amount = 5;</code>
     * @return string
     */
    public function getAmount()
    {
        return $this->amount;
    }

    /**
     * Amount of each individual payment
     *
     * Generated from protobuf field <code>string amount = 5;</code>
     * @param string $var
     * @return $this
     */
    public function setAmount($var)
    {
        GPBUtil::checkString($var, True);
        $this->amount = $var;

        return $this;
    }

    /**
     * ISO 4217, 3 letter currency code such as "USD" or "EUR".
     *
     * Generated from protobuf field <code>string currency = 6;</code>
     * @return string
     */
    public function getCurrency()
    {
        return $this->currency;
    }

    /**
     * ISO 4217, 3 letter currency code such as "USD" or "EUR".
     *
     * Generated from protobuf field <code>string currency = 6;</code>
     * @param string $var
     * @return $this
     */
    public function setCurrency($var)
    {
        GPBUtil::checkString($var, True);
        $this->currency = $var;

        return $this;
    }

}

